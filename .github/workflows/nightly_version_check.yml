name: All dependencies are up to date

on:
  schedule:
    # Schedule to run every night at 00:00
    - cron:  '0 0 * * *'
  workflow_dispatch:
  push:

env:
  git_repos: ("novnc/noVNC" "novnc/websockify")
  docker_repos: ("alpine")
  target_branch: "main"
  working_branch: "update-versions"
  
  
jobs:
  check-tags:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Get external repository tags
      run: |
        . .github/workflows/utils.sh
        declare -a repos=${git_repos}

        for repo in "${repos[@]}"
        do
          # Fetch all tags
          tags=$(curl -s https://api.github.com/repos/${repo}/tags?per_page=5)
          # Get the latest tag
          latest_tag=$(echo $tags | jq -r '[.[] | select(.name | test("-beta"; "i") | not) | .name][0]')
          echo "$(normalise ${repo})_LATEST_TAG=${latest_tag}" >> $GITHUB_ENV
        done

    - name: Get latest version of Docker image
      run: |
        . .github/workflows/utils.sh
        declare -a repos=${docker_repos}

        for repo in "${repos[@]}"
        do
          # Fetch all tags
          tags=$(curl https://registry.hub.docker.com/v2/repositories/library/${repo}/tags?page_size=5)
          # Get the latest tag
          latest_tag=$(echo $tags | jq -r '[.results[] | select(.name | test("latest"; "i") | not) | select(.name | test("rc"; "i") | not) | .name][0]')
          echo "$(normalise ${repo})_LATEST_TAG=${latest_tag}" >> $GITHUB_ENV
        done

    - name: Compare tags to .env file
      id: check_tags
      run: |
        . .github/workflows/utils.sh
        declare -a git_repo=${git_repos}
        declare -a docker_repo=${docker_repos}
        declare -a repos=("${git_repo[@]}" "${docker_repo[@]}")
        changes=false

        for repo in "${repos[@]}"
        do
          repo=$(normalise ${repo})
          env_tag=$(grep ${repo}_TAG .env | awk -F '=' '{print $2}')
          latest_tag_key=$(echo ${repo}_LATEST_TAG)
          latest_tag=${!latest_tag_key}
          echo "Checking ${repo} has a new tag - current: ${env_tag}, new ${latest_tag}"
          if [ $env_tag != $latest_tag ]; then
              echo "${repo} has a new tag: ${latest_tag}"
              sed -i "s/^${repo}_TAG=.*/${repo}_TAG=${latest_tag}/g" .env
              sed -i "s/^ARG ${repo}_TAG=.*/ARG ${repo}_TAG=${latest_tag}/g" Dockerfile
              sed -i "s/${repo}_TAG:-.*/${repo}_TAG:-${latest_tag}}/g" docker-compose.yml
              changes=true
          fi
        done
        echo "has_changes=${changes}" >> $GITHUB_ENV

    - name: Fail if there are any version differences
      if: ${{ env.has_changes == 'true' }}
      run: |
        exit 1
