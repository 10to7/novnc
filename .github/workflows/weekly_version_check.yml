name: Compare Repo Tags and Docker Image Version

on:
  schedule:
    - cron:  '0 0 * * 1' # run every Monday at 00:00

env:
  git_repos: ("novnc/noVNC" "novnc/websockify")
  docker_repos: ("alpine")
  target_branch: "main"
  working_branch: "update-versions"
  
  
jobs:
  check-tags:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set global function
      run: chmod +x .github/workflows/utils.sh; .github/workflows/utils.sh
    
    - name: Switch to the update-versions branch
      run: |
        git config --global user.email "${{ env.GIT_EMAIL }}"
        git config --global user.name "${{ env.GIT_NAME }}"
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY

        if ! git show-branch ${working_branch}; then
          git branch ${working_branch}
        fi

        git switch ${working_branch}

    - name: Get external repository tags
      run: |
        for repo in "${git_repos[@]}"
        do
          # Fetch all tags
          tags=$(curl -s https://api.github.com/repos/${repo}/tags?per_page=5)

          # Filter out tags that contain "-beta"
          filtered_tags=$(echo $tags | jq '.[] | select(.name | test("-beta"; "i") | not)')

          # Get the latest tag
          latest_tag=$(echo $filtered_tags | jq 'sort_by(.name) | last | .name')
          echo "::set-env name=$(normalise ${repo})_LATEST_TAG::${latest_tag}"
        done

    - name: Get latest version of Docker image
      run: |
        for repo in "${docker_repos[@]}"
        do
          # Fetch all tags
          tag=$(curl https://registry.hub.docker.com/v2/repositories/library/${repo}/tags?page_size=5 | jq -r '.results[] | .name')
          
          # Filter out tags that contain "rc" or "latest"
          filtered_tags=$(echo $tags | awk '!/(rc|latest)/ {print}') 

          # Get the latest tag
          latest_tag=$(echo | head -n1)
          echo "::set-env name=$(normalise ${repo})_LATEST_TAG::${latest_tag}"
        done

    - name: Compare tags to .env file
      id: check_tags
      run: |
        repos=("${git_repos[@]}" "${docker_repos[@]}")
        changes=false
        commit_message = "Updating dependencies, using: "
        for repo in "${repos[@]}"
        do
          repo=$(normalise ${repo})
          env_tag=$(grep ${repo}_TAG .env | awk -F '=' '{print $2}')
          latest_tag=${{ env.${repo}_LATEST_TAG }}
          if [ $env_tag != $latest_tag ]; then
              echo "${repo} has a new tag: ${latest_tag}"
              sed -i "s/^${repo}_TAG=.*/${repo}_TAG=${latest_tag}/g" .env
              sed -i "s/^ARG ${repo}_TAG=.*/ARG ${repo}_TAG=${latest_tag}/g" Dockerfile
              sed -i "s/${repo}_TAG:-.*/${repo}_TAG:-${latest_tag}}/g" docker-compose.yml
              commit_message="${commit_message} ${repo}_TAG=${latest_tag}"
              changes=true
          fi
        done

    - name: Add changed files to git commit
      if: steps.check_tags.outputs.changes == 'true'
      run: |
        git add .env Dockerfile docker-compose.yml
        git commit -m steps.check_tags.outputs.commit_message

        UPSTREAM_BRANCH=$(git rev-parse --abbrev-ref --quiet @{u})
        if [ -z "$UPSTREAM_BRANCH" ]; then
          # If there is no upstream branch, add one.
          git branch --set-upstream-to=origin/$(git rev-parse --abbrev-ref HEAD)
        fi

        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/OWNER/REPO.git ${working_branch}

    - name: Create merge request if changes detected
      if: steps.check_tags.outputs.changes == 'true'
      run: |
        echo "Changes detected. Creating merge request..."
        uses: peter-evans/create-pull-request@v3
        with:
          title: Update to latest versions
          body: |
            This merge request updates the repository to the latest versions of the git tags and Docker image.
          head: update-to-latest-versions
          base: main
